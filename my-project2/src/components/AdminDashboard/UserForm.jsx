/**
 * This code was generated by Builder.io.
 */
import { useState } from "react";
import React from "react";
import { supabase } from "../../lib/supabase";

const UserForm = ({users}) => {
  const [selected, setSelected] = useState(null)
  const [success, setSuccess] = useState(false)
  const handleUpdate = async () => {
    if (selected) {
      const { data, error } = await supabase
        .from('profile')
        .update({
          display_name: selected.display_name,
          height: selected.height,
          weight: selected.weight,
          email: selected.email
        })
        .eq('id', selected.id)
        .select();
      setSuccess(true)

    } else {
      console.error('No user selected');
    }
  };

  return (
    <div className="flex flex-col w-[66%] max-md:ml-0 max-md:w-full">
      <form className="flex flex-col items-start pt-2 pr-20 pb-4 pl-6 w-full text-base font-medium leading-6 bg-white rounded-lg border border-solid shadow-sm border-neutral-200 text-zinc-500 max-md:px-5 max-md:mt-10 max-md:max-w-full">
        <div className="flex gap-4 px-4 py-2 bg-white rounded-lg border border-solid border-neutral-200">
          <select onChange={(e)=>{setSelected(users?.find((user)=> user.email ===e.target.value))}} className="flex-1 text-ellipsis bg-transparent border-none outline-none">
            <option>Select user</option>
            {users?.map((user)=>{return(
              <option value={user.email}>
                {user.email}
              </option>
            )})}
            
          </select>
          <img
            loading="lazy"
            src="https://cdn.builder.io/api/v1/image/assets/TEMP/245de0f0c45e9a16d332378bca3d5ff08d50f4cf294ae90ec616490145201c21?apiKey=7a3a7c63ac864902b9d3b9e8514feb0a&"
            className="shrink-0 w-6 aspect-square"
            alt="Dropdown icon"
          />
        </div>
        <label htmlFor="username" className="mt-5 text-black max-md:ml-2">
          Username
        </label>
        <input
          id="username"
          type="text"
          placeholder="empty"
          onChange={(e)=>{setSelected({...selected, display_name: e.target.value})}}
          value={selected?.display_name}
          className="justify-center px-4 py-1.5 mt-2 text-xl whitespace-nowrap bg-white rounded-lg border border-solid border-neutral-200 text-ellipsis max-md:ml-2"
        />
        <label htmlFor="height" className="mt-3.5 text-black max-md:ml-2">
          Height
        </label>
        <input
          id="height"
          type="number"
          placeholder="Placeholder"
          onChange={(e)=>{setSelected({...selected, height: e.target.value})}}
          value={selected?.height}
          className="justify-center px-4 py-1.5 mt-2 text-xl whitespace-nowrap bg-white rounded-lg border border-solid border-neutral-200 text-ellipsis max-md:ml-2"
        />
        <label htmlFor="weight" className="mt-8 text-black max-md:ml-2">
          Weight
        </label>
        <input
          id="weight"
          type="number"
          value={selected?.weight}
          onChange={(e)=>{setSelected({...selected, weight: e.target.value})}}
          placeholder="Placeholder"
          className="justify-center px-4 py-1.5 mt-2 text-xl whitespace-nowrap bg-white rounded-lg border border-solid border-neutral-200 text-ellipsis max-md:ml-2"
        />
        <label htmlFor="email" className="mt-3.5 text-black max-md:ml-2">
          Email
        </label>
        <input
          id="email"
          type="email"
          value={selected?.email}
          placeholder="Placeholder"
          onChange={(e)=>{setSelected({...selected, email: e.target.value})}}
          className="justify-center px-4 py-1.5 mt-2 text-xl whitespace-nowrap bg-white rounded-lg border border-solid border-neutral-200 text-ellipsis max-md:ml-2"
        />
        <button
          type="button"
          className="justify-center px-4 py-2 mt-8 text-black rounded-lg bg-zinc-100"
          onClick={handleUpdate
          }   
        >
          Edit User Info
        </button>
        {success && <div className="text-green-300"> Edited user successfully</div>}
      </form>
    </div>
  );
};

export default UserForm;
